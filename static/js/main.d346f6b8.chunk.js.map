{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","onSubmit","e","preventDefault","trim","uuid","v4","className","TextField","label","name","type","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","comleted","IconButton","TodoList","todos","List","map","key","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAsCeA,MAjCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,CAC7BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJY,mBACpBC,EADoB,KACdC,EADc,KAmB3B,OACI,0BAAMC,SATV,SAAuBC,GACnBA,EAAEC,iBACCJ,EAAKF,KAAKO,SACTV,EAAQ,2BAAIK,GAAL,IAAWH,GAAIS,IAAKC,MAC3BN,EAAQ,2BAAID,GAAL,IAAWF,KAAM,QAKEU,UAAU,aACpC,kBAACC,EAAA,EAAD,CACAC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOb,EAAKF,KACZgB,SAnBR,SAAgCX,GAC5BF,EAAO,2BAAMD,GAAN,IAAYF,KAAMK,EAAEY,OAAOF,YAoB9B,kBAACG,EAAA,EAAD,CAAQJ,KAAK,UAAb,Y,qDCAGK,MA7Bf,YAAoD,IAApCjB,EAAmC,EAAnCA,KAAMkB,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,WAWlC,OACI,kBAACC,EAAA,EAAD,CAAUC,MAAQ,CAAEC,QAAS,SAC7B,kBAACC,EAAA,EAAD,CACAC,QAASxB,EAAKD,UACd0B,QAbJ,WACIP,EAAelB,EAAKH,OAapB,kBAAC6B,EAAA,EAAD,CACAC,QAAQ,QACRN,MAAO,CACHO,eAAgB5B,EAAK6B,SAAW,eAAgB,OAEnD7B,EAAKF,MAEN,kBAACgC,EAAA,EAAD,CAAYL,QAjBhB,WACIN,EAAWnB,EAAKH,MAgBwB,kBAAC,IAAD,S,SCPjCkC,MAhBf,YAAyD,IAArCC,EAAoC,EAApCA,MAAOd,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,WAEvC,OACI,kBAACc,EAAA,EAAD,KACKD,EAAME,KAAM,SAAAlC,GAAI,OACb,kBAAC,EAAD,CACAmC,IAAKnC,EAAKH,GACVG,KAAMA,EACNkB,eAAgBA,EAChBC,WAAYA,SCiDbiB,MArDf,WAAgB,IAAD,EAEaxC,mBAAU,IAFvB,mBAENoC,EAFM,KAECK,EAFD,KAqCb,OAjCAC,qBAAW,WACT,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QARvB,0BASpBJ,GACFF,EAASE,KAER,IAEHD,qBAAU,WACRI,aAAaE,QAfS,wBAekBJ,KAAKK,UAAUb,MACtD,CAACA,IAyBF,yBAAKxB,UAAU,OACb,kBAACkB,EAAA,EAAD,CAAYC,QAAQ,KAAKnB,UAAU,MAAnC,aAIA,kBAAC,EAAD,CAAUb,QA5Bd,SAAiBK,GACfqC,EAAS,CAACrC,GAAF,mBAAWgC,QA4BjB,kBAAC,EAAD,CACAA,MAAOA,EACPd,eA3BJ,SAAwBrB,GACtBwC,EACEL,EAAME,KAAK,SAAAlC,GACT,OAAGA,EAAKH,KAAOA,EACN,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,OAmBTmB,WAdJ,SAAoBtB,GAClBwC,EAASL,EAAMc,QAAO,SAAA9C,GAAI,OAAIA,EAAKH,KAAOA,WC/B1BkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d346f6b8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {v4 as uuid} from \"uuid\";\nimport {Button, TextField } from \"@material-ui/core\"\n\n\nfunction TodoForm({ addTodo }) {\n    const [todo, setTodo] = useState({\n        id: \"\",\n        task: \"\",\n        completed: false\n    });\n\n    function handleTaskInputChange (e) {\n        setTodo ({...todo, task: e.target.value});\n    }\n\n    function handleSubmit (e) {\n        e.preventDefault ();\n        if(todo.task.trim()) {\n            addTodo({...todo, id: uuid.v4 });\n            setTodo({...todo, task: \"\"});\n           \n        }\n    }\n    return(\n        <form onSubmit={handleSubmit} className=\"todo-form\">\n            <TextField\n            label=\"Task\"\n            name=\"task\"\n            type=\"text\"\n            value={todo.task}\n            onChange={handleTaskInputChange}\n            />\n            <Button type=\"submit\">Submit</Button>\n        </form>\n    )\n}\n\nexport default TodoForm;\n","import React from \"react\";\nimport {Checkbox, IconButton, ListItem, Typography} from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nfunction Todo ({todo, toggleComplete, removeTodo}) {\n\n    function handleCheckboxClick() {\n        toggleComplete(todo.id);\n    }\n\n    function handleRemoveClick(){\n        removeTodo(todo.id)\n    }\n    \n    \n    return (\n        <ListItem style ={{ display :\"flex\"}}>\n        <Checkbox\n        checked={todo.completed} \n        onClick={handleCheckboxClick} />\n        <Typography\n        variant=\"body1\"\n        style={{\n            textDecoration: todo.comleted ? \"line-through\": null\n        }}>\n        {todo.task}\n        </Typography>\n        <IconButton onClick={handleRemoveClick}><CloseIcon/></IconButton>\n\n        </ListItem>\n    );\n}\n\nexport default Todo;","import React from \"react\";\nimport Todo from \"./Todo\";\nimport {List} from \"@material-ui/core\"\n\nfunction TodoList ({todos, toggleComplete, removeTodo}) {\n  \n    return (\n        <List>\n            {todos.map ( todo => (\n                <Todo \n                key={todo.id} \n                todo={todo} \n                toggleComplete={toggleComplete}\n                removeTodo={removeTodo}/>\n            ))}\n       </List>\n       \n    );\n}\n\nexport default TodoList;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\n\nfunction App() {\n\n  const [todos, setTodos] = useState ([]);\n\n  useEffect (() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n  if (storageTodos) {\n    setTodos(storageTodos);\n  }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos]);\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n  };\n\n  function toggleComplete(id) {\n    setTodos (\n      todos.map (todo => {\n        if(todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n  \n  return (\n    <div className=\"App\">\n      <Typography variant=\"h1\" className=\"h1\">\n    Todo List\n      </Typography>\n     \n      <TodoForm addTodo= {addTodo} />\n      <TodoList \n      todos={todos} \n      toggleComplete={toggleComplete}\n      removeTodo={removeTodo} />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}